(defun setup-test-node (point road arc-cost parent g-value action)
   (let ((node (intern (concatenate 'string "Node-" (prin1-to-string (+ (* 1000 (car point)) (cadr point)))))))
      (setf (get node 'state) point)
      (setf (get node 'road) road)
      (setf (get node 'arc-cost) arc-cost)
      (setf (get node 'parent) parent)
      (setf (get node 'action) action)
      (setf (get node 'best-path-cost) g-value)
      (setf (get node 'cost-to-goal-estimate) 7)
      (setf (get node 'least-cost-estimate) (+ 7 g-value))
     node))
(defun describe-node (node name open-closed)
   (terpri)
   (format t "A node in the search graph is   ~A" node)
   (terpri)
   (format t "Its parent is   ~A" (get node 'parent))
   (terpri)
   (format t "Its action is   ~A" (get node 'action))
   (terpri)
   (format t "Its best-path-cost is   ~A" (get node 'best-path-cost))
   (terpri)
   (format t "Its least-cost-estimate is   ~A" (get node 'least-cost-estimate))
   (terpri)
   (cond ((member node (car open-closed))
            (format t "This node is on the open list"))
         (t (format t "This node is on the closed list")))
   (terpri)
   (format t "*****************************************")
   (terpri)
  )
   
(defun test2 ()

(format t "The next functions set up the database")
(terpri)
(print-eval '(
(load "CityMapDatabase-14.lisp")))
(print-eval '(
(CityMap-setup)))

(terpri)
(format t "Now test update-node-closed")
(terpri)
(format t "The following is the starting graph configuration")
(setq nodeS (setup-test-node '(99 101) "first" 2 () 13 ()))
(setq nodeA (setup-test-node '(102 101) "first" 2 nodeS 15 '((99 101) (102 101) "first")))
(setq nodeB (setup-test-node '(103 101) "first" 2 nodeA 17 '((102 101) (103 101) "first")))
(setq nodeC (setup-test-node '(101 101) "first" 2 nodeA 17 '((102 101) (101 101) "first")))
(setq nodeD (setup-test-node '(104 101) "first" 2 nodeB 19 '((103 101) (104 101) "first")))
(setq nodeE (setup-test-node '(105 101) "first" 2  nodeD 21 '((104 101) (105 101) "first")))
(setq nodeF (setup-test-node '(108 116) "Marway" 24.23 nodeA 39.23 '((102 101)(108 116) "Marway")))
(setq nodeX (setup-test-node '(127 105) "ave-127" 2 () 2 '((126 105)(127 105) "ave-127"))) 
(setq nodeW (setup-test-node '(120 120) "some-highway" 3 nodeX 7 '((127 105) (120 120) "some-highway"))) 
(setq open (list nodeC nodeE nodeF))
(setq closed (list nodeS nodeA nodeB nodeD nodeW nodeX))
(setq openandclosed (list open closed))
(describe-node nodeS "S" openandclosed)
(describe-node nodeA "A" openandclosed)
(describe-node nodeC "C" openandclosed)
(describe-node nodeB "B" openandclosed)
(describe-node nodeF "F" openandclosed)
(describe-node nodeD "D" openandclosed)
(describe-node nodeE "E" openandclosed)
(format t "The new node with a better path to  ~A  is "  nodeA)
(terpri)
(describe-node nodeW "W" openandclosed)
(terpri)
(format t "The better path cost  is 10 to get to ~A " nodeA)
(terpri)
(format t "Its action that takes one to ~A is ((120 120) (102 101) some-highway)" nodeA)
(terpri)
(format t "**********************************************************************")
(terpri)
(format t 
                    "The nodes and f-values on open list are ~A" 
                     (mapcar #'(lambda (x)
                              (list x (get x 'least-cost-estimate)))
                              (car openandclosed)))
                 (terpri)
                 (format t 
                     "The nodes, f-values  on closed list are ~A" 
                      (mapcar #'(lambda (x)
                              (list x (get x 'least-cost-estimate)))
                              (cadr openandclosed)))
(terpri)
(format t "************************************************")
(terpri)
(format t "Now execute update-node-closed")
(terpri)

(setq result (update-node-closed nodeA nodeW 'successors-CM 10 '((120 120) (102 101) "some-highway") openandclosed))
(format t "The new graph configuration is")
(terpri)
(describe-node nodeS "S" result)
(describe-node nodeA "A" result)
(describe-node nodeC "C" result)
(describe-node nodeB "B" result)
(describe-node nodeF "F" result)
(describe-node nodeD "D" result)
(describe-node nodeE "E" result)
(format t 
                    "The nodes and f-values on open list are ~A" 
                     (mapcar #'(lambda (x)
                              (list x (get x 'least-cost-estimate)))
                              (car result)))
                 (terpri)
                 (format t 
                     "The nodes, f-values  on closed list are ~A" 
                      (mapcar #'(lambda (x)
                              (list x (get x 'least-cost-estimate)))
                              (cadr result)))

)
